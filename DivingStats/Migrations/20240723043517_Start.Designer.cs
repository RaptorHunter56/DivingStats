// <auto-generated />
using DivingStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DivingStats.Migrations
{
    [DbContext(typeof(DiveDbContext))]
    [Migration("20240723043517_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.32");

            modelBuilder.Entity("DivingStats.Models.Competition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("DivingStats.Models.Dive", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Board")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("DD")
                        .HasColumnType("TEXT");

                    b.HasKey("ID", "Board");

                    b.ToTable("Dives");
                });

            modelBuilder.Entity("DivingStats.Models.Diver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Divers");
                });

            modelBuilder.Entity("DivingStats.Models.IndividualDive", b =>
                {
                    b.Property<int>("DiverID")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("RoundID")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<decimal>("DiveBoard")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiveID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DiverID", "RoundID", "RoundNumber");

                    b.HasIndex("RoundID");

                    b.HasIndex("DiveID", "DiveBoard");

                    b.ToTable("IndividualDives");
                });

            modelBuilder.Entity("DivingStats.Models.Round", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CompetitionID");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("DivingStats.Models.IndividualDive", b =>
                {
                    b.HasOne("DivingStats.Models.Diver", "Diver")
                        .WithMany("IndividualDives")
                        .HasForeignKey("DiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingStats.Models.Round", "Round")
                        .WithMany("IndividualDives")
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DivingStats.Models.Dive", "Dive")
                        .WithMany("IndividualDives")
                        .HasForeignKey("DiveID", "DiveBoard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dive");

                    b.Navigation("Diver");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("DivingStats.Models.Round", b =>
                {
                    b.HasOne("DivingStats.Models.Competition", "Competition")
                        .WithMany("Rounds")
                        .HasForeignKey("CompetitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("DivingStats.Models.Competition", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("DivingStats.Models.Dive", b =>
                {
                    b.Navigation("IndividualDives");
                });

            modelBuilder.Entity("DivingStats.Models.Diver", b =>
                {
                    b.Navigation("IndividualDives");
                });

            modelBuilder.Entity("DivingStats.Models.Round", b =>
                {
                    b.Navigation("IndividualDives");
                });
#pragma warning restore 612, 618
        }
    }
}
